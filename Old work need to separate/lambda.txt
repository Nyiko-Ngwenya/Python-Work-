how to define lambda functions // lambda var1,var2 : var1 * var2   

in normal functions 
def name(var1,var2):
	var1*var2

you dont assign returns in lambda

# Create a list of strings: spells
spells = ["protego", "accio", "expecto patronum", "legilimens"]

# Use map() to apply a lambda function over spells: shout_spells 
shout_spells = map((lambda x:x+'!!!'), spells)  // for each instance x is assigned and added with the ! string and added to map

# Convert shout_spells to a list: shout_spells_list
shout_spells_list= list(shout_spells)  //  we convert the map to list

# Print the result
print(shout_spells_list)



when using filter() it almost works as a way to check like a if statement 

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'pippin', 'aragorn', 'boromir', 'legolas', 'gimli', 'gandalf']

# Use filter() to apply a lambda function over fellowship: result
result = filter((lambda member: len(member) >6 ), fellowship)  // is saying if member length is > 6 add to the filter

# Convert result to a list: result_list
result_list = list(result)

# Print result_list
print(result_list)





The reduce will return on item unlike the map and filter 

# Import reduce from functools
from functools import reduce 

# Create a list of strings: stark
stark = ['robb', 'sansa', 'arya', 'brandon', 'rickon']

# Use reduce() to apply a lambda function over stark: result
result = reduce((lambda item1,item2 :item1+item2), stark) // this will keep iterating and adding the next word onto the alreadyy going word

# Print the result
print(result)

works like this 
# Define gibberish
def gibberish(*args):
    """Concatenate strings in *args together."""
    hodgepodge = ''
    for word in args:
        hodgepodge += word
    return hodgepodge



# Select retweets from the Twitter DataFrame: result
result = filter((lambda x: x[:2] == 'RT'), tweets_df['text']) // this will get all the messages wheich start with RT in the tweets_df['text'] column series

# Create list from filter object result: res_list
res_list = list(result)

# Print all retweets in res_list
for tweet in res_list:
    print(tweet)