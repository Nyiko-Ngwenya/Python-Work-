iterable // object is associated with iter() method

word = 'Da'

it = iter(word) // will create iterator  
next(it)   // this will loop the first iteration
out: 'D'
next(it)   //this will loop the second iteration
out: 'a'
We could also iterate at once 
print(*it) 
out: D a

Enumerate 

enumerate() takes value of iterabele and returns a enumerate class // enumerate(list)

e = enumerate(list)
e_list = list(e)

print(e_list) // this will priont out the list and index of each item in the list

can also go through it in for loop

for index,value in enumerate(list,optional can state the first index ,start =10):
	print(index,value)

zip() will create tuples using two lists 
z = zip(list1,list2)

or 
for z1,z2 in zip(list1,list2):
	print(z1,z2)

to unzip // list1,list2 =zip(*zippedObject )  // * mean do all of them

# Initialize an empty dictionary: counts_dict
counts_dict = {}

# Iterate over the file chunk by chunk
for chunk in pd.read_csv('tweets.csv', chunksize=10):  // create a chunk of info to be proccessed at a time is a chunksize

    # Iterate over the column in DataFrame
    for entry in chunk['lang']:   // here we iterate for each entry in the dataframe column 'lang'
        if entry in counts_dict.keys(): // if the language is a key in the dictionary then if is true
            counts_dict[entry] += 1
        else:
            counts_dict[entry] = 1

# Print the populated dictionary
print(counts_dict)


List  Comprehensions

is sued to change list and nmake new list

nums = [12,5,6] // this is old list
new_nums = [num+1 for num in nums]  // this means condition for variable in oldList
out:new_nums = [13,6,7]

to create a matrix
# Create a 5 x 5 matrix using a list of lists: matrix
matrix = [[col for col in range(5) ] for row in range(5)]

# Print the matrix
for row in matrix:
    print(row)

adding conditions

[num**2 for num in range(10) if num% 2 =0] // wioll only store numbers that are even ass % means remainder
[num**2 if num%2==0 else 0 for num in range(10)] // will have else statement and do something else 


dictionary comprehensions
{num: num for num in range(9)}

Generator experssions
same as list but has circular brackets
(num for num in list)

Gennerator functions

# Create a list of strings
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Define generator function get_lengths
def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield person

# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)





# Extract the created_at column from df: tweet_time
tweet_time = df['created_at']  // we create a series 

# Extract the clock time: tweet_clock_time
tweet_clock_time = [entry[11:19] for entry in tweet_time]  // from this we make a list to only contain the time 

# Print the extracted times
print(tweet_clock_time)






