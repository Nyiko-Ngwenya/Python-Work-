# Create a list of y-axis column names: y_columns
y_columns = ['AAPL','IBM']

# Generate a line plot
df.plot(x='Month', y=y_columns)

# Add the title
plt.title('Monthly stock prices')

# Add the y-axis label
plt.ylabel('Price ($US)')

# Display the plot
plt.show()


EXAMPLE 1

# Make a list of the column names to be plotted: cols
cols = ['weight','mpg']

# Generate the box plots
df[cols].plot(kind='box',subplots=True)

# Display the plot
plt.show()

EXAMPLE 2

Remember, when plotting the PDF, you need to specify normed=True in your call to .hist(), 
and when plotting the CDF, you need to specify cumulative=True in addition to normed=True

# This formats the plots such that they appear on separate rows
fig, axes = plt.subplots(nrows=2, ncols=1)

# Plot the PDF
df.fraction.plot(ax=axes[0], kind='hist', normed=True, bins=30, range=(0,.3))
plt.show()

# Plot the CDF
df.fraction.plot(ax=axes[1], kind='hist', normed=True, cumulative=True, range=(0,.3))
plt.show()


count = number of entries
mean = average of entries
std = standard deviation
min = minimum entry
25 = first quartile
50 = median
75 = third quartile
max = maximum 

df[col name].count()
df[['col name' , 'col name 2']].count()
df.mean()

df.median() == df.quartile(0.5)  * quartile takes from 0 to 1


EXAMPLE 

# Print the number of countries reported in 2015
print(df['2015'].count())

# Print the 5th and 95th percentiles
print(df.quantile([0.05,0.95]))

# Generate a box plot
years = ['1800','1850','1900','1950','2000']
df[years].plot(kind='box')
plt.show()


Separating populations with Boolean indexing

df['species'].describe()

count = non null entries
unique = distinct values
top = most frequent category
freq = occurence of top

to get unique values // df['col name'].unique()


to filter by species 

indices = iris['species'] == 'setosa'
setosa = df.loc[indices,:]

to get rows that contain 'Asia' as origin // df[df['origin'] == 'US']

EXAMPLE

# Display the box plots on 3 separate rows and 1 column
fig, axes = plt.subplots(nrows=3, ncols=1)

# Generate a box plot of the fare prices for the First passenger class
titanic.loc[titanic['pclass'] == 1].plot(ax=axes[0], y='fare', kind='box')

# Generate a box plot of the fare prices for the Second passenger class
titanic.loc[titanic['pclass']  == 2].plot(ax=axes[1], y='fare', kind='box')

# Generate a box plot of the fare prices for the Third passenger class
titanic.loc[titanic['pclass']  == 3].plot(ax=axes[2], y='fare', kind='box')

# Display the plot
plt.show()








