Continuous Variables

Quantities that can take any value not just discrete.

Probability density function
-continous analog to PMF
-is area under the graph 

Normal Distribution is area under the graph witr only one single peak
-mean is middle of grpah , std is how wide the peak is .

THESE ARE PARAMETERS AND DONT MATCH THE MEAN AND STD THATS CALCULATED

import numpy as np

mean = np.mean(something)
std = np.std(something)
samples = np.random.normal(mean,std,size=10000)
x,y = edcf(somethign)
x_theor,t_theor = ecdf(samples)

plt.plot(x_theor,y_theor)
plt,plot(x,y,marker='.',linestyle='none')
plt.show()


EXAMPLE OF THE NORMAL PDF


# Draw 100000 samples from Normal distribution with stds of interest: samples_std1, samples_std3, samples_std10
samples_std1 = np.random.normal(20,1,size=100000) 
samples_std3 = np.random.normal(20,3,size=100000) 
samples_std10 = np.random.normal(20,10,size=100000) 



# Make histograms
plt.hist(samples_std1,normed=True,histtype='step',bins=100)
plt.hist(samples_std3,normed=True,histtype='step',bins=100)
plt.hist(samples_std10,normed=True,histtype='step',bins=100)



# Make a legend, set limits and show plot
_ = plt.legend(('std = 1', 'std = 3', 'std = 10'))
plt.ylim(-0.01, 0.42)
plt.show()

EXAMPLE OF CDF OF THE NORMAL PDF


# Generate CDFs
x_std1, y_std1 = ecdf(samples_std1)
x_std3, y_std3 = ecdf(samples_std3)
x_std10, y_std10 = ecdf(samples_std10)



# Plot CDFs
plt.plot(x_std1, y_std1,marker='.',linestyle='none')
plt.plot(x_std3, y_std3,marker='.',linestyle='none')
plt.plot(x_std10, y_std10,marker='.',linestyle='none')


# Make a legend and show the plot
_ = plt.legend(('std = 1', 'std = 3', 'std = 10'), loc='lower right')
plt.show()



EXAMPLE of What are the chances of a horse matching or beating Secretariat's record?



# Take a million samples out of the Normal distribution: samples
samples = np.random.normal(mu, sigma, size=1000000)

# Compute the fraction that are faster than 144 seconds: prob
prob = np.sum(samples <= 144) / len(samples)

# Print the result
print('Probability of besting Secretariat:', prob)


EXAMPLES of



def successive_poisson(tau1, tau2, size=1):
    """Compute time for arrival of 2 successive Poisson processes."""
    # Draw samples out of first exponential distribution: t1
    t1 =  np.random.exponential(tau1, size)

    # Draw samples out of second exponential distribution: t2
    t2 =  np.random.exponential(tau2, size)

    return t1 + t2

EXAMPLE OF Distribution of no-hitters and cycles



# Draw samples of waiting times
waiting_times = successive_poisson(764, 715, size=100000)

# Make the histogram
_ = plt.hist(waiting_times, bins=100, histtype='step',
             normed=True)

# Label axes
_ = plt.xlabel('total waiting time (games)')
_ = plt.ylabel('PDF')

# Show the plot
plt.show()


