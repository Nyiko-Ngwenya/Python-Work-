to get column value  // df[col][row] or df.col[row]
to get value using loc // df['row','col']
to get using loc // df[4,2] * 4 is row , 2 is col . * uses 0index

print(election.iloc[x, y] == election.loc['Bedford', 'winner'])

to make sure you get specfic col as df // df_new = df[['salt','eggs']]

to make a series // df['col name']
to slice a series // df['col name'][1:4] another way df['col name'][4]
using .loc series // df.loc[:,'col name':'col name2'] * all rows some columns
to get all columns but some rows // df.loc['Jan':'Apr',:]

always starts with rows then columns when slicing
ALWAYS STARTS WITH ROWS 

get columns and some rows //df.loc['Mar':'May', 'salt':'spam']
same as top but iloc// df.iloc[2:5,1:]

using lists in place of slices // df.loc['Jan':'May',['eggs','spam']]
and in iloc // df.iloc[[0,4,5], 0:2]

to get speciofic rows and whole lines // election.loc[['Perry','Potter'],:]

to get specific rows and whole line in reverse // election.loc['Potter':'Perry':-1,:]


EXAMPLE OF SLICING COLUMNS

# Slice the columns from the starting column to 'Obama': left_columns
left_columns = election.loc[:,:'Obama']

# Print the output of left_columns.head()
print(left_columns.head())

# Slice the columns from 'Obama' to 'winner': middle_columns
middle_columns = election.loc[:,'Obama':'winner']

# Print the output of middle_columns.head()
print(middle_columns.head())

# Slice the columns from 'Romney' to the end: 'right_columns'
right_columns = election.loc[:,'Romney':]

# Print the output of right_columns.head()
print(right_columns.head())


SUBSELECTING DATAFRAMES WITH LISTS


# Create the list of row labels: rows
rows = ['Philadelphia', 'Centre', 'Fulton']

# Create the list of column labels: cols
cols = ['winner', 'Obama', 'Romney']

# Create the new DataFrame: three_counties
three_counties = election.loc[rows,cols]

# Print the three_counties DataFrame
print(three_counties)


FILTERING

to get rows that meet bool in the dataframe // df[df.salt > 60] 
combining filters // df[(df.salt >= 50) & (df.eggs < 200)]
to df that dont contain NaNs or zeros // df.loc[:,df.all()] *df.all() only takes columns with complete information

EXAMPLE OF MORE FILTERING 


# Import numpy
import numpy as np

# Create the boolean array: too_close
too_close = election.margin < 1 

# Assign np.nan to the 'winner' column where the results were too close to call
election['winner'][too_close] = np.nan

# Print the output of election.info()
print(election)


FILTERING USING NANS


# Select the 'age' and 'cabin' columns: df
df = titanic[['age','cabin']]

# Print the shape of df
print(df.shape)

# Drop rows in df with how='any' and print the shape
print(df.dropna(how='any').shape)

# Drop rows in df with how='all' and print the shape
print(df.dropna(how='all').shadf.dropna(how='any').shapepe)

# Drop columns in titanic with less than 1000 non-missing values
print(titanic.dropna(thresh=1000, axis='columns').info())


TRANSFORMING DATAFRAMES VECTORING

convert all data in df to dozens // df.floordiv(12)
or numpy method of it // np.floor_divide(df,12)
or a function // def dozens: return n/12  ;;df.apply(dozens)
or lambda  // df.apply(lambda n: n//12)

must always store in a new column when altering dataframe

df['dozens_of_eggs'] = df.eggs.floordiv
df.index = df.index.str.upper() if you set the index to a previously a column
to work strictly on index values not previously a col // df.index = df.index.map(str.lower)


USING APPLY TO TRANSFORM A COLUMN


# Write a function to convert degrees Fahrenheit to degrees Celsius: to_celsius
def to_celsius(F):
    return 5/9*(F - 32)

# Apply the function over 'Mean TemperatureF' and 'Mean Dew PointF': df_celsius
df_celsius = weather[['Mean TemperatureF','Mean Dew PointF']].apply(to_celsius)

# Reassign the column labels of df_celsius
df_celsius.columns = ['Mean TemperatureC', 'Mean Dew PointC']

# Print the output of df_celsius.head()
print(df_celsius.head())




The .map() method is used to transform values according to a Python dictionary look-up.


# Create the dictionary: red_vs_blue
red_vs_blue = {'Obama':'blue','Romney':'red'}

# Use the dictionary to map the 'winner' column to the new column: election['color']
election['color'] = election['winner'].map(red_vs_blue)

# Print the output of election.head()
print(election.head())


the z-score is the number of standard deviations by which an observation is above the mean - so if it is negative, it means the observation is below the mean.


# Import zscore from scipy.stats
from scipy.stats import zscore

# Call zscore with election['turnout'] as input: turnout_zscore
turnout_zscore = zscore(election['turnout'])

# Print the type of turnout_zscore
print(type(turnout_zscore))

# Assign turnout_zscore to a new column: election['turnout_zscore']
election['turnout_zscore'] = turnout_zscore

# Print the output of election.head()
print(election.head())




